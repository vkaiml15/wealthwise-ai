import React, { useState, useEffect, useRef } from 'react';
import { useAuth } from '../../context/AuthContext';
import { getQBusinessService } from '../../services/qbusinessService';
import {
  Send,
  TrendingUp,
  BarChart3,
  Shield,
  Target,
  Loader2,
  AlertCircle,
  RefreshCw,
  Bot,
  FileText,
  Volume2,
  VolumeX
} from 'lucide-react';
import Message from './Message';
import Avatar3D from '../Avatar3D';
import { pollyService } from '../../services/pollyService';

const ChatInterface = () => {
  const { currentUser, portfolio } = useAuth();
  const [inputValue, setInputValue] = useState('');
  const [messages, setMessages] = useState([]);
  const [isTyping, setIsTyping] = useState(false);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [autoSpeak, setAutoSpeak] = useState(true);
  const [error, setError] = useState(null);
  const messagesEndRef = useRef(null);
  const inputRef = useRef(null);
  const qBusinessService = getQBusinessService();

  // Quick action queries
  const quickActions = [
    {
      icon: BarChart3,
      label: 'Analyze Portfolio',
      query: 'Analyze my portfolio',
      color: 'indigo'
    },
    {
      icon: TrendingUp,
      label: 'Market Trends',
      query: 'What are the current market trends?',
      color: 'purple'
    },
    {
      icon: Shield,
      label: 'Risk Analysis',
      query: 'Analyze my risk profile',
      color: 'green'
    },
    {
      icon: Target,
      label: 'Recommendations',
      query: 'Give me stock recommendations',
      color: 'blue'
    }
  ];

  // Auto-scroll to bottom when new messages arrive
  useEffect(() => {
    scrollToBottom();
  }, [messages, isTyping]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (inputValue.trim() && !isTyping) {
      await handleQBusinessMessage(inputValue.trim());
      setInputValue('');
    }
  };

  const handleQBusinessMessage = async (query) => {
    // Clear any previous errors
    setError(null);

    // Add user message
    const userMessage = {
      role: 'user',
      content: query,
      timestamp: Date.now()
    };
    setMessages(prev => [...prev, userMessage]);
    setIsTyping(true);

    try {
      const response = await qBusinessService.sendMessage(
        query,
        currentUser?.email || 'user@wealthwise.com'
      );

      if (response.success) {
        const assistantMessage = {
          role: 'assistant',
          content: response.message || 'No response received',
          timestamp: Date.now(),
          agent: 'Q Business',
          sources: response.sources || []
        };
        setMessages(prev => [...prev, assistantMessage]);

        // Speak the response if auto-speak is enabled
        if (autoSpeak && response.message) {
          setIsSpeaking(true);
          pollyService.speak(response.message)
            .then(() => setIsSpeaking(false))
            .catch((error) => {
              console.error('Speech error:', error);
              setIsSpeaking(false);
            });
        }
      } else {
        // Handle API error
        const errorMessage = {
          role: 'assistant',
          content: response.message || 'Sorry, I encountered an error. Please try again.',
          timestamp: Date.now(),
          agent: 'Q Business',
          isError: true
        };
        setMessages(prev => [...prev, errorMessage]);
        setError(response.error);
      }
    } catch (error) {
      console.error('Q Business error:', error);
      const errorMessage = {
        role: 'assistant',
        content: 'Sorry, I encountered an error connecting to Q Business. Please ensure the backend is running.',
        timestamp: Date.now(),
        agent: 'Q Business',
        isError: true
      };
      setMessages(prev => [...prev, errorMessage]);
      setError(error.message);
    } finally {
      setIsTyping(false);
    }
  };

  const handleQuickAction = (query) => {
    if (!isTyping) {
      setInputValue(query);
      // Auto-submit after a brief delay
      setTimeout(() => {
        handleQBusinessMessage(query);
        setInputValue('');
      }, 100);
    }
  };

  const handleClearChat = () => {
    if (window.confirm('Are you sure you want to clear the chat history?')) {
      setMessages([]);
      setError(null);
      pollyService.stop();
      setIsSpeaking(false);
      qBusinessService.startNewConversation();
      setInputValue('');
    }
  };

  const handleVoiceToggle = () => {
    if (isSpeaking) {
      pollyService.stop();
      setIsSpeaking(false);
    }
    setAutoSpeak(!autoSpeak);
  };

  return (
    <div className="flex flex-col h-full bg-gray-50">
      {/* Header */}
      <div className="bg-white border-b border-gray-200 px-6 py-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <div className="w-10 h-10 bg-gradient-to-br from-purple-500 to-indigo-600 rounded-lg flex items-center justify-center">
              <Bot className="w-6 h-6 text-white" />
            </div>
            <div>
              <h2 className="text-lg font-semibold text-gray-900">AI Investment Advisor</h2>
              <p className="text-sm text-gray-500">Ask me anything about your investments</p>
            </div>
          </div>

          <div className="flex items-center space-x-3">
            <div className="flex items-center space-x-2 px-3 py-1.5 bg-purple-50 text-purple-700 rounded-lg border border-purple-200">
              <Bot className="w-4 h-4" />
              <span className="text-sm font-medium">Q Business</span>
              <span className="px-2 py-0.5 bg-purple-100 text-purple-700 text-xs rounded-full">
                ðŸ“„ Docs
              </span>
            </div>

            {messages.length > 0 && (
              <button
                onClick={handleClearChat}
                className="flex items-center space-x-2 px-4 py-2 text-sm text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-lg transition-colors"
              >
                <RefreshCw className="w-4 h-4" />
                <span>Clear Chat</span>
              </button>
            )}
          </div>
        </div>

        {/* Error Banner */}
        {error && (
          <div className="mt-3 p-3 bg-red-50 border border-red-200 rounded-lg flex items-start space-x-2">
            <AlertCircle className="w-5 h-5 text-red-600 flex-shrink-0 mt-0.5" />
            <div className="flex-1">
              <p className="text-sm font-medium text-red-900">Connection Error</p>
              <p className="text-xs text-red-700 mt-1">{error}</p>
            </div>
            <button
              onClick={() => setError(null)}
              className="text-red-400 hover:text-red-600"
            >
              Ã—
            </button>
          </div>
        )}
      </div>

      {/* Messages Area - Split Screen Layout */}
      <div className="flex-1 flex gap-4 overflow-hidden">
        {/* Avatar Panel - Always Visible */}
        <div className="w-80 flex-shrink-0 bg-gradient-to-br from-purple-50 via-indigo-50 to-purple-100 border-r border-purple-200 flex flex-col">
          {/* Avatar Container */}
          <div className="flex-1 relative">
            <Avatar3D 
              isTyping={isTyping || isSpeaking}
              showControls={false}
              cameraPosition={[0, 0.3, 2.2]}
              zoom={45}
            />
            
            {/* Avatar Status Badge */}
            <div className="absolute bottom-4 left-1/2 transform -translate-x-1/2 px-4 py-2 bg-white/90 backdrop-blur-sm rounded-full shadow-lg border border-purple-200">
              <div className="flex items-center space-x-3">
                <div className={`w-2 h-2 rounded-full ${isSpeaking ? 'bg-blue-500 animate-pulse' : isTyping ? 'bg-purple-500 animate-pulse' : 'bg-green-500'}`}></div>
                <span className="text-sm font-medium text-gray-700">
                  {isSpeaking ? 'Speaking...' : isTyping ? 'Thinking...' : 'Ready'}
                </span>
                
                {/* Voice Toggle Button */}
                <button
                  onClick={handleVoiceToggle}
                  className={`p-1.5 rounded-full transition-colors ${autoSpeak ? 'bg-purple-500 text-white' : 'bg-gray-200 text-gray-600'}`}
                  title={autoSpeak ? 'Voice On' : 'Voice Off'}
                >
                  {autoSpeak ? <Volume2 className="w-3 h-3" /> : <VolumeX className="w-3 h-3" />}
                </button>
              </div>
            </div>
          </div>
          
          {/* Avatar Info Card */}
          <div className="p-4 bg-white/80 backdrop-blur-sm border-t border-purple-200">
            <div className="flex items-center space-x-3 mb-2">
              <div className="w-10 h-10 bg-gradient-to-br from-purple-500 to-indigo-600 rounded-lg flex items-center justify-center">
                <Bot className="w-6 h-6 text-white" />
              </div>
              <div>
                <h3 className="font-semibold text-gray-900">AI Advisor</h3>
                <p className="text-xs text-gray-500">Amazon Q Business + Polly</p>
              </div>
            </div>
            <p className="text-xs text-gray-600 leading-relaxed">
              Your personal investment advisor powered by AI with voice responses
            </p>
          </div>
        </div>

        {/* Chat Panel */}
        <div className="flex-1 flex flex-col overflow-hidden bg-gray-50">
          <div className="flex-1 overflow-y-auto px-6 py-6 space-y-6">
            {messages.length === 0 ? (
              // Empty State
              <div className="h-full flex flex-col items-center justify-center text-center px-4">
                <div className="w-20 h-20 bg-gradient-to-br from-purple-100 to-indigo-100 rounded-full flex items-center justify-center mb-6">
                  <Bot className="w-10 h-10 text-purple-600" />
                </div>
                <h3 className="text-2xl font-bold text-gray-900 mb-3">
                  Welcome back, {currentUser?.name || 'Investor'}!
                </h3>
                <p className="text-gray-600 mb-2 max-w-md">
                  I'm Amazon Q Business with voice powered by AWS Polly. Ask me about your indexed portfolio documents, strategies, and specific holdings.
                </p>
                <p className="text-sm text-gray-500 mb-8">
                  ðŸ’¡ I can search through your uploaded documents and speak the responses!
                </p>

                {/* Quick Actions */}
                <div className="w-full max-w-2xl">
                  <p className="text-sm font-medium text-gray-700 mb-4">Quick Actions:</p>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                    {quickActions.map((action, index) => (
                      <button
                        key={index}
                        onClick={() => handleQuickAction(action.query)}
                        className="flex items-center space-x-3 p-4 bg-white border-2 border-gray-200 rounded-xl hover:border-purple-500 hover:bg-purple-50 transition-all group"
                      >
                        <div className="w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center group-hover:bg-purple-200 transition-colors">
                          <action.icon className="w-5 h-5 text-purple-600" />
                        </div>
                        <div className="flex-1 text-left">
                          <p className="font-medium text-gray-900">{action.label}</p>
                          <p className="text-xs text-gray-500 mt-0.5">{action.query}</p>
                        </div>
                      </button>
                    ))}
                  </div>
                </div>
              </div>
            ) : (
              // Messages
              <>
                {messages.map((message, index) => (
                  <Message key={index} message={message} />
                ))}

                {/* Typing Indicator */}
                {isTyping && (
                  <div className="flex items-start space-x-3">
                    <div className="w-8 h-8 bg-gradient-to-br from-purple-500 to-indigo-600 rounded-full flex items-center justify-center flex-shrink-0">
                      <Bot className="w-4 h-4 text-white" />
                    </div>
                    <div className="bg-white rounded-2xl rounded-tl-none px-4 py-3 shadow-sm border border-gray-200">
                      <div className="flex items-center space-x-2">
                        <Loader2 className="w-4 h-4 text-purple-600 animate-spin" />
                        <span className="text-sm text-gray-600">Searching documents...</span>
                      </div>
                    </div>
                  </div>
                )}

                <div ref={messagesEndRef} />
              </>
            )}
          </div>
        </div>
      </div>

      {/* Input Area */}
      <div className="bg-white border-t border-gray-200 px-6 py-4">
        {/* Context Indicator */}
        {messages.length > 0 && qBusinessService.getConversationId() && (
          <div className="mb-3 flex items-center space-x-2 text-xs text-gray-500">
            <FileText className="w-3 h-3" />
            <span>
              Conversation ID: {qBusinessService.getConversationId()?.substring(0, 8)}...
            </span>
          </div>
        )}

        <form onSubmit={handleSubmit} className="flex items-end space-x-3">
          <div className="flex-1">
            <textarea
              ref={inputRef}
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
              onKeyDown={(e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                  e.preventDefault();
                  handleSubmit(e);
                }
              }}
              placeholder="Ask about your documents, holdings, or strategies..."
              className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all outline-none resize-none"
              rows="1"
              style={{
                minHeight: '48px',
                maxHeight: '120px',
              }}
              disabled={isTyping}
            />
          </div>
          <button
            type="submit"
            disabled={!inputValue.trim() || isTyping}
            className="px-6 py-3 bg-gradient-to-r from-purple-600 to-indigo-600 text-white rounded-xl font-medium hover:from-purple-700 hover:to-indigo-700 transition-all disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2 shadow-lg hover:shadow-xl"
          >
            {isTyping ? (
              <Loader2 className="w-5 h-5 animate-spin" />
            ) : (
              <Send className="w-5 h-5" />
            )}
            <span className="hidden sm:inline">Send</span>
          </button>
        </form>

        {/* Quick Tips */}
        {messages.length === 0 && (
          <div className="mt-3 flex flex-wrap gap-2">
            <span className="text-xs text-gray-500">Try asking:</span>
            {['What documents do I have?', 'Search for stock analysis', 'Find bond information'].map((tip, index) => (
              <button
                key={index}
                onClick={() => setInputValue(tip)}
                className="text-xs px-3 py-1 bg-purple-50 text-purple-600 rounded-full hover:bg-purple-100 transition-colors"
              >
                {tip}
              </button>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default ChatInterface;
