import { PollyClient, SynthesizeSpeechCommand } from '@aws-sdk/client-polly';

class PollyService {
  constructor() {
    this.currentAudio = null;
    this.backendUrl = process.env.REACT_APP_API_URL || 'http://44.203.95.38:8000';
  }

  async speak(text, voiceId = 'Joanna') {
    try {
      // Stop any currently playing audio
      this.stop();

      console.log('ðŸ”Š Requesting speech synthesis...', text.substring(0, 50));

      // Call backend API
      const response = await fetch(`${this.backendUrl}/api/polly/synthesize`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          text: text,
          voiceId: voiceId
        })
      });

      const data = await response.json();
      console.log('ðŸ”Š Backend response:', { success: data.success, audioLength: data.audio?.length });

      if (!data.success) {
        throw new Error(data.error || 'Failed to synthesize speech');
      }

      // Convert base64 audio to blob
      const audioBlob = this.base64ToBlob(data.audio, 'audio/mpeg');
      const audioUrl = URL.createObjectURL(audioBlob);
      
      console.log('ðŸ”Š Audio blob created, size:', audioBlob.size, 'bytes');

      // Create and play audio
      this.currentAudio = new Audio(audioUrl);
      
      return new Promise((resolve, reject) => {
        this.currentAudio.onloadeddata = () => {
          console.log('ðŸ”Š Audio loaded, duration:', this.currentAudio.duration);
        };

        this.currentAudio.onplay = () => {
          console.log('ðŸ”Š Audio playing...');
        };

        this.currentAudio.onended = () => {
          console.log('ðŸ”Š Audio finished');
          URL.revokeObjectURL(audioUrl);
          this.currentAudio = null;
          resolve();
        };
        
        this.currentAudio.onerror = (error) => {
          console.error('ðŸ”Š Audio playback error:', error);
          URL.revokeObjectURL(audioUrl);
          this.currentAudio = null;
          reject(error);
        };

        // Start playback
        this.currentAudio.play()
          .then(() => console.log('ðŸ”Š Play() called successfully'))
          .catch((err) => {
            console.error('ðŸ”Š Play() failed:', err);
            reject(err);
          });
      });
    } catch (error) {
      console.error('ðŸ”Š Polly error:', error);
      throw error;
    }
  }

  stop() {
    if (this.currentAudio) {
      this.currentAudio.pause();
      this.currentAudio.currentTime = 0;
      this.currentAudio = null;
      console.log('ðŸ”Š Audio stopped');
    }
  }

  isPlaying() {
    return this.currentAudio && !this.currentAudio.paused;
  }

  base64ToBlob(base64, mimeType) {
    try {
      const byteCharacters = atob(base64);
      const byteNumbers = new Array(byteCharacters.length);
      
      for (let i = 0; i < byteCharacters.length; i++) {
        byteNumbers[i] = byteCharacters.charCodeAt(i);
      }
      
      const byteArray = new Uint8Array(byteNumbers);
      return new Blob([byteArray], { type: mimeType });
    } catch (error) {
      console.error('ðŸ”Š Base64 decode error:', error);
      throw error;
    }
  }
}

export const pollyService = new PollyService();
